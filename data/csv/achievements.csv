Name, Date, Achievement, Topics, Tags, Impact, Source
"Muhammad ibn Musa al-Khwarizmi", "800", "The term '#{algorithm|Algorithms & data structures}' is derived from the algorism, the technique of performing arithmetic with Hindu-Arabic numerals developed by al-Khwarizmi. Both 'algorithm' and 'algorism' are derived from the Latinized forms of al-Khwarizmi's name, Algoritmi and Algorismi, respectively.", "Algorithms & data structures, Foundations", "Mathematics", "5", "https://en.wikipedia.org/wiki/Muhammad_ibn_Musa_al-Khwarizmi#Arithmetic"
"John Vincent Atanasoff", "1939", "Designed the #{Atanasoff-Berry computer} (ABC), the first automatic #{electronic digital computer|Eearly computers}. The ABC's priority is debated among historians of computer technology, because it was not programmable, nor #{Turing-complete|Turing-completeness}.", "Early computers", "Atanasoff-Berry Computer", "4", "https://en.wikipedia.org/wiki/Atanasoff%E2%80%93Berry_computer"
"Charles Babbage", "1825", "Invented the #{Difference Engine}, an automatic mechanical calculator designed to tabulate polynomial functions. It was not programmable, nor #{Turing-complete|Turing-completeness} but demonstrated a major advancement of the technology of the time.", "Early Computers, Foundations", "Difference Engine", "5", "https://en.wikipedia.org/wiki/Difference_engine"
"Charles Babbage", "1837", "Designed the #{Analytical Engine}. The first, general-purpose, programmable mechanical computer. It was programmed via punched cards and was #{Turing-complete|Turing-completeness}. It was 100 years ahead of it's time.", "Early computers, Foundations", "Analytical Engine, Punch cards", "5", "https://en.wikipedia.org/wiki/Analytical_engine"
"John Backus", "1953", "Created #{Speedcoding}, also known As Speedcode, the first high level #{programming language|Programming languages} built for an #{IBM} computer.", "Programming languages", "Speedcoding", "3", "https://en.wikipedia.org/wiki/Speedcoding"
"John Backus", "1954", "Lead the team who developed #{FORTRAN} for the IBM 704 computer. FORTRAN was one of the first high-level #{programming languages} that saw wide-spread use.", "Programming languages", "FORTRAN", "5", "https://en.wikipedia.org/wiki/Fortran"
"John Backus", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential #{programming language|Programming languages} which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Programming paradigms, Programming languages", "ALGOL", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"John Backus", "1960", "Invented the #{Backus-Naur Form} (previously known as Backus Normal Form), a notation for context-free grammars which is used to describe the syntax of #{programming languages}.", "Programming languages", "Backus-naur form, Context-free languages", "4", "https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"
"John Backus", "1977", "Created #{FP}, a function-level #{programming language|Progamming languages}. FP helped spark an interest in the #{functional programming} paradigm.", "Programming paradigms, Programming languages", "FP, Functional programming, Function-level programming", "2", "https://en.wikipedia.org/wiki/FP_(programming_language)"
"John Backus", "1989", "Created #{FL}, a #{function-level programming} language that is considered a successor to #{FP}.", "Programming paradigms, Programming languages", "FL, Function-level programming, Functional programming", "2", "https://en.wikipedia.org/wiki/FL_(programming_language)"
"Jean Bartik", "1946", "Became one of the six original programmers on #{ENIAC}.", "Early computers, Women in computing", "ENIAC", "3", "https://en.wikipedia.org/wiki/ENIAC#Programming"
"Jean Bartik", "1948", "Was part of a team charged with developing the concept of the '#{stored-program computer}'.", "Early computers, Women in computing", "Stored-program computer", "3", "https://en.wikipedia.org/wiki/Stored-program_computer"
"Jean Bartik", "1949", "Helped develop the #{BINAC} AND #{UNIVAC} I computers.", "Early computers, Women in Computing", "BINAC, UNIVAC", "3", "https://en.wikipedia.org/wiki/Jean_Bartik#Career_as_a_computer_programmer"
"Tim Berners-Lee", "1980", "Invented #{ENQUIRE}, a system for sharing documents over the #{Internet}. It is considered a precursor to the #{World Wide Web}.", "Internet & networking", "ENQUIRE, World Wide Web", "3", "https://en.wikipedia.org/wiki/ENQUIRE"
"Tim Berners-Lee", "1989", "Specified #{HTML}, an SGML-based markup language for describing hypertext documents. Originally, #{HTML} only included 18 tags.", "Internet & networking", "HTML", "4", "https://en.wikipedia.org/wiki/HTML"
"Tim Berners-Lee", "1989", "Invented WorldWideWeb, the world's first Web Browser and WYSIWYG HTML editor. It was written in Objective-C.", "Internet & networking", "World Wide Web, HTML", "4", "https://en.wikipedia.org/wiki/WorldWideWeb"
"Tim Berners-Lee", "1990", "Along with Ari Luotonen and Henrik Frystyk, invented CERN HTTPd, the first #{Web server|HTTP}. It ran as a daemon and was written in C.", "Internet & networking", "World Wide Web, HTTP", "5", "https://en.wikipedia.org/wiki/CERN_httpd"
"Tim Berners-Lee", "1991", "Formally released the Hypertext Transport Protocol (#{HTTP}) version 0.9 along with a team of Engineers. #{HTTP} v0.9 was only capable of GET requests.", "Internet & networking", "World Wide Web, HTTP", "5", "https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"
"George Boole", "1847", "Invented Symbolic #{logic}, the basis for Boolean Algebra, a mathematical system for describing logical relations. It would become the basis for electronic #{circuit design}.", "Foundations", "Mathematics, Logic, Circuit design", "5", "https://en.wikipedia.org/wiki/Boolean_algebra"
"George Boole", "1854", "Published 'The Laws of Thought', which further laid-out #{algebraic logic|Logic}.", "Foundations, Publications", "Mathematics, Logic", "4", "https://en.wikipedia.org/wiki/The_Laws_of_Thought"
"Per Brinch Hansen", "1969", "Primary developer of the RC 4000 Multiprogramming System (also known as Monitor), the first operating system to implement a kernel. Although not particularly successful, it was hugely influential in the design of future #{operating systems}.", "Operating systems", "RC 4000", "3", "https://en.wikipedia.org/wiki/RC_4000_multiprogramming_system"
"Per Brinch Hansen", "1973", "Published 'Operating System Principles', the first comprehensive textbok on #{operating systems}. It was hailed for it's simplicity and clarity in treatment of a complex subject.", "Operating systems, Publications", "", "3", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1973", "Along with #{C. A. R. Hoare}, invented #{Monitors}, a construct for allowing #{threads|Concurrency} to have mutual exclusion and the ability to wait/block for conditions to become true.", "Algorithms & data structures, Concurrency", "Monitors", "3", "https://en.wikipedia.org/wiki/Monitor_(synchronization)"
"Per Brinch Hansen", "1975", "Invented Concurrent #{Pascal}, the first #{programming language} to implement #{monitors}.", "Programming languages, Concurrency", "Pascal, Monitors", "3", "https://en.wikipedia.org/wiki/Concurrent_Pascal"
"Per Brinch Hansen", "1977", "Published 'The Architecture of Concurrent Programs', the first comprehensive textbok on #{concurrent programming|Concurrency}.", "Concurrency, Publications", "", "2", "https://en.wikipedia.org/wiki/Per_Brinch_Hansen#Operating_Systems"
"Per Brinch Hansen", "1978", "Published a paper on #{distributed proceses|Distributed computing}, which introduced concepts which are now known as #{remote procedure calling|RPC} (RPC). RPC is a technique for executing code in a remote address space (such as another computer in a network).", "Internet & networking, Publications", "Distributed computing, RPC", "3", "https://en.wikipedia.org/wiki/Remote_procedure_call"
"Nikolay Brusentsov", "1958", "Invented Setun, the first (and only?) balanced ternary computer. Setun used three fundamental values (-1, 0, 1) instead of the more common two values (0, 1) in binary computers. This gives Setun the distinct advantage of lower power consumption than typical binary computers.", "Early computers", "Setun", "3", "https://en.wikipedia.org/wiki/Setun"
"Nikolay Brusentsov", "1970", "Invented #{Setun} 70, whose #{CPU} design presented many concepts that would later be incorporated (perhaps independently) into the Reduced Instruction-Set Computing (#{RISC}) architecture.", "Early computers", "Setun, RISC", "3", "http://en.uacomputing.com/persons/brusentsov/"
"Vannevar Bush", "1945", "Published 'As We May Think', an article which introduced the Memex - a theoretical electronic device that would allow users to store and retrieve books, records and communications. The design involved linking documents via association, which would come to be very influential in the creation of #{hypertext} systems.", "Publications, Internet & Networking", "Memex, Hypertext", "4", "https://en.wikipedia.org/wiki/Memex"
"David Caminer", "1951", "Helped design the Lyons Electonic Office (#{LEO}) computer, which was the first business computer. For his effort, David Caminer is often called the world's first Software Engineer.", "Early computers", "LEO, Software engineering", "3", "https://en.wikipedia.org/wiki/LEO_%28computer%29"
"Vint Cerf", "1973", "Conducted early research around the notion of packet-switching #{network|Internet & networking} protocols.", "Internet & networking", "", "3", "https://en.wikipedia.org/wiki/Vint_Cerf"
"Vint Cerf", "1975", "Co-designed the #{TCP/IP} #{network|Internet & networking} protocol suite for the US Department of Defense.", "Internet & networking", "TCP/IP", "5", "https://en.wikipedia.org/wiki/Internet_protocol_suite"
"Vint Cerf", "1984", "Lead engineer on MCI Mail, the first commercial E-mail service to be connected to the #{Internet|Internet & networking}", "Internet & networking", "Email", "4", "https://en.wikipedia.org/wiki/MCI_Mail"
"Vint Cerf", "1992", "Co-founded the Internet Society to provide guidance for standards and education related to the Internet.", "Internet & networking", "", "2", "https://en.wikipedia.org/wiki/Internet_Society"
"Noam Chomsky", "1956", "Invented the Chomsky Hierarchy; a set of classes of formal grammars that have become especially important in the creation of compilers and interpreters in #{computer programming|Programming languages}.", "Algorithms & data structures, Programming languages", "Formal languages", "4", "https://en.wikipedia.org/wiki/Chomsky_hierarchy"
"Alonzo Church", "1933", "Invented #{lambda calculus}, a formal mathematical system for presenting computation based purely on function abstraction and application. Lambda calculus proved to be a universal model of computation that would be incredibly important in the development of #{programming languages}.", "Foundations, Programming languages, Programming paradigms, Theoretical computer science", "Mathematics, Lambda Calculus", "5", "https://en.wikipedia.org/wiki/Lambda_calculus"
"Alonzo Church", "1935", "Provided a negative answer to the #{Entscheidungsproblem}, which asks if there is an algorithm to determine if an axiom is true in all models of a theory. This would have great impact on the theory of computation in later years.", "Foundations, Theoretical computer science", "Mathematics, Entscheidungsproblem", "5", "https://en.wikipedia.org/wiki/Entscheidungsproblem"
"Alonzo Church", "1936", "Based on inconsistencies found by #{Kleene|Stephen Cole Kleene} and Rosser, refined the #{lambda calculus} to present only the portion relevent to computation. This is now known as the untyped lambda calculus.", "Foundations, Theoretical computer science", "Mathematics, Lambda Calculus", "4", "https://en.wikipedia.org/wiki/Lambda_calculus"
"Wesley A. Clark", "1955", "Created the logic systems for the #{TX-0} (Transistorized Experimental computer zero) computer, an early fully-transistorized digital computer that was used at MIT.", "Early computers", "TX-0, Transistor", "3", "https://en.wikipedia.org/wiki/TX-0"
"Wesley A. Clark", "1958", "Chief Architect for the #{TX-2} (Transistorized Experimental computer two) computer, an early fully-transistorized digital computer that was important in the advancement of the field of #{artificial intelligence}.", "Early computers, Artificial intelligence", "TX-2, Transistor", "3", "https://en.wikipedia.org/wiki/TX-2"
"Wesley A. Clark", "1962", "Co-designed #{LINC}, the world's first #{minicomputer} and forerunner to the now ubiquitous personal computer. #{LINC} would go on to inspire many ideas for the wildly successful #{PDP-8|PDP} minicomputer.", "Early computers", "Minicomputer, LINC, PDP", "4", "https://en.wikipedia.org/wiki/LINC"
"Edmund M. Clarke", "1979", "Published a paper proving that for certain programming language constructs it is impossible to obtain good #{Hoare|C. A. R. Hoare} axiom systems. The paper demonstrated that recursive procedures with parameters in languages with a static scope for identifiers and #{coroutines} in languages that allow parameterless recursive procedures cannot be proven correct via the #{Hoare logic} formal system.", "Publications, Programming languages", "Hoare logic", "2", "http://www.cs.cmu.edu/~emc/papers/Papers%20In%20Refereed%20Journals/79_impossible_hoareaxiom.pdf"
"Edmund M. Clarke", "1981", "Along with his student #{E. Allen Emerson}, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & data structures", "Model checking", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Edgar F. Codd", "1970", "Published a paper entitled 'A Relational Model of Data for Large Shared Data Banks', which laid the theoretical foundations for relational #{databases} and query languages such as SQL.", "Databases, Algorithms & data structures, Publications", "", "4", "https://en.wikipedia.org/wiki/Edgar_F._Codd#Work"
"Douglas Engelbart", "1965", "Along with his team, invented the concepts for bitmapped screen displays.", "Computer graphics", "Bitmap", "4", "https://en.wikipedia.org/wiki/Raster_graphics"
"Douglas Engelbart", "1965", "Along with his team, invented early systems implementing the foundations for #{hypertext} - interlinked systems of documents.", "Internet & networking", "Hypertext", "4", "https://en.wikipedia.org/wiki/Hypertext#History"
"Douglas Engelbart", "1967", "Along with Bill English, invented the computer mouse in the form of a wooden shell atop two metal wheels. It was described as an 'X-Y position indicator for a display system'.", "Computer graphics", "Mouse", "5", "https://en.wikipedia.org/wiki/Computer_mouse"
"Douglas Engelbart", "1968", "Presented and demonstrated original inventions including the computer mouse, computer networks, hypertext and several others. It is now referred to as 'The mother of all demos'.", "Publications, Internet & networking", "Hypertext, Mouse", "3", "https://en.wikipedia.org/wiki/The_Mother_of_All_Demos"
"E. Allen Emerson", "1981", "Along with #{Edmund M. Clarke}, invented and developed #{model checking}, a system for mathematically verifying that a given model meets a formal specification. This would become important for the verification of hardware systems.", "Algorithms & data structures", "Mathematics, Model checking", "3", "https://en.wikipedia.org/wiki/Model_checking"
"Stephen Cook", "1971", "Published the seminal paper 'The Complexity of Theorem Proving Procedures', which introduced the notions of Cook Reduction and #{NP-completeness}. NP-completeness refers to problems for which no efficient algorithm exists. The paper also famously posed the #{P vs. NP} question.", "Algorithms & data structures, Publications, Theoretical computer science", "NP-completeness, P vs. NP, Theorem provers", "5", "https://en.wikipedia.org/wiki/NP-complete"
"Stephen Cook", "1975", "Published the influential paper 'Feasibly Constructive Proofs and the Propositional Calculus', which formalised the notion of proofs using only polynomial-time concepts.", "Algorithms & data structures, Publications, Theoretical computer science", "NP-completeness", "3", "https://en.wikipedia.org/wiki/Stephen_Cook#Research"
"Wil van der Aalst", "1992", "Conducted research into the application of #{Petri nets} to workflow management systems.", "Concurrency", "Petri nets", "1", "https://en.wikipedia.org/wiki/Wil_van_der_Aalst#Work"
"Wil van der Aalst", "2004", "Led the development of the YAWL, a workflow system inspired by Petri Nets.", "Concurrency", "Petri nets, YAWL", "1", "http://yawlfoundation.org/"
"Carl Adam Petri", "1939", "Invented #{Petri nets}, a mathematical language for describing distributed systems. He was 13. Petri nets have found applications in many fields including #{concurrency} and #{artificial intelligence}.", "Foundations, Concurrency, Artificial intelligence", "Petri nets, Distributed computing", "3", "https://en.wikipedia.org/wiki/Petri_net"
"Hal Abelson", "1981", "Led the development of the first implementation of the #{Logo} programming language for the Apple II, which made the language widely available on personal computers.", "Programming languages", "Logo", "2", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Hal Abelson", "1985", "Co-authored the Structure and Interpretation of Computer Programs (#{SICP}), an introductory computer science textbook that is widely considered a classic text. It is still widely used in computer science education.", "Algorithms & data structures, Publications", "SICP, Lisp, Scheme", "3", "https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs"
"Wally Feurzeig", "1967", "Co-invented #{Logo}, an educational programming language and dialect of #{Lisp}. Logo introduced the notion of Turtle graphics, in which commands were interpreted as line graphics.", "Programming languages", "Logo, Lisp", "3", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Seymour Papert", "1967", "Co-invented #{Logo}, an educational programming language and dialect of #{Lisp}. Logo introduced the notion of Turtle graphics, in which commands were interpreted as line graphics.", "Programming languages", "Logo, Lisp", "3", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Seymour Papert", "1972", "Co-invented the first #{Logo} turtle device, an educational robot that was capable of interpreting the #{Logo} programming language. The robots were capable of outputting results onto a peice of paper via a mounted pen.", "Programming languages", "Logo", "2", "https://en.wikipedia.org/wiki/Turtle_(robot)"
"Cynthia Solomon", "1967", "Co-invented #{Logo}, an educational programming language and dialect of #{Lisp}. Logo introduced the notion of Turtle graphics, in which commands were interpreted as line graphics.", "Algorithms & data structures, Programming languages, Women in computing", "Logo, Lisp", "3", "https://en.wikipedia.org/wiki/Logo_%28programming_language%29"
"Leonard Adleman", "1994", "Published a paper which described the experimental use of DNA as a computational system by solving a trivial instance of an #{NP-complete|NP-completeness} problem using DNA.", "Publications, Theoretical computer science, Algorithms & data structures", "NP-completeness", "2", "https://en.wikipedia.org/wiki/Leonard_Adleman#Discovery"
"Leonard Adleman", "1977", "Co-created the RSA encryption algorithm that is widely used for secure data transmission. In the RSA cryptosystem, there are two keys - a public encryption key and a private decryption key.", "Algorithms & data structures, Cryptography", "RSA", "4", "https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29"
"Manindra Agrawal", "2002", "Co-created the AKS primality test algorithm in a paper called 'PRIMES is in P'. The algorithm determines whether a number is prime or composite within #{polynomial time|P vs. NP}, which was previously an open question in theoretical computer science.", "Algorithms & data structures, Theoretical computer science, Publications", "P vs. NP, NP-completeness", "3", "https://en.wikipedia.org/wiki/AKS_primality_test"
"Nitin Saxena", "2002", "Co-created the AKS primality test algorithm in a paper called 'PRIMES is in P'. The algorithm determines whether a number is prime or composite within #{polynomial time|P vs. NP}, which was previously an open question in theoretical computer science.", "Algorithms & data structures, Theoretical computer science, Publications", "P vs. NP, NP-completeness", "3", "https://en.wikipedia.org/wiki/AKS_primality_test"
"Neeraj Kayal", "2002", "Co-created the AKS primality test algorithm in a paper called 'PRIMES is in P'. The algorithm determines whether a number is prime or composite within #{polynomial time|P vs. NP}, which was previously an open question in theoretical computer science.", "Algorithms & data structures, Theoretical computer science, Publications", "P vs. NP, NP-completeness", "3", "https://en.wikipedia.org/wiki/AKS_primality_test"
"Luis von Ahn", "2000", "Did early pioneering work on #{CAPTCHAS|CAPTCHA}, a simple challenge-response test to tell Humans and computers apart; a modern implementation of a #{Turing test}.", "Artificial intelligence, Publications", "CAPTCHA, Turing test", "2", "https://en.wikipedia.org/wiki/CAPTCHA"
"Luis von Ahn", "2005", "Introduced the notion of Human Computation, a form of computation which combines human brainpower and computers to solve problems neither could solve alone.", "Publications", "", "1", "https://en.wikipedia.org/wiki/Human-based_computation_game"
"Alfred Aho", "1976", "Devised efficient algorithms for #{regular expressions} and string-pattern matching that would be utilised by the yacc parser generator and lex lexical analyser generator that together form the front-end of many modern compilers.", "Algorithms & data structures, Programming languages", "Regular expressions, yacc, lex", "3", "https://en.wikipedia.org/wiki/Alfred_Aho#Career"
"Alfred Aho", "1977", "Co-authored 'Principles of Compiler Design', also known as the 'Dragon Book', which is widely considered a classic text in computer science.", "Algorithms & data structures, Programming languages, Publications", "Dragon book", "3", "https://en.wikipedia.org/wiki/Principles_of_Compiler_Design"
"Alfred Aho", "1977", "Co-developed AWK, a programming language for text processing that is still shipped on most Unix-like operating systems.", "Programming languages", "AWK", "3", "https://en.wikipedia.org/wiki/AWK"
"Frances E. Allen", "1966", "Published the paper 'Program Optimization', which laid the conceptual basis for systematic analysis and transformation of computer programs.", "Algorithms & data structures, Programming languages, Publications, Women in computing", "Optimizing compilers", "3", "http://awards.acm.org/award_winners/allen_1012327.cfm"
"Frances E. Allen", "1970", "Published several papers on the topic of optimizing compilers. Optimizing compilers, among other things, attempt to improve the execution time of output programs.", "Programming languages, Publications, Women in computing", "Optimizing compilers", "2", "http://awards.acm.org/award_winners/allen_1012327.cfm"
"Sanjeev Arora", "1991", "Produced foundational work on the #{PCP theorem}, a cornerstone of computational hardness of approximation, which investigates the inherent difficulty in designing efficient approximation algorithms.", "Algorithms & data structures, Publications, Theoretical computer science", "PCP theorem", "2", "https://en.wikipedia.org/wiki/PCP_theorem"
"Sanjeev Arora", "2010", "Discovered a polynomial time approximation scheme for the euclidean #{travelling salesman problem}, an #{NP-hard|P vs. NP} problem in #{theoretical computer science} that searches for the most effectient path between vertices in an undirected weighted graph.", "Algorithms & data structures, Theoretical computer science", "P vs. NP, NP-completeness, Travelling salesman problem", "2", "https://en.wikipedia.org/wiki/Travelling_salesman_problem"
"Charles Bachman", "1963", "Developed the 'Integrated Data Store' (IDS), a pioneering network database that was known for it's high performance. IDS is unmatched in performance even today.", "Algorithms & data structures, Databases", "IDS", "3", "https://en.wikipedia.org/wiki/Integrated_Data_Store"
"Victor Bahl", "1999", "Designed and deployed the world's first free public area Wi-Fi hotspot in a Washington Shopping Center. The effort introduced several now-common protocols in Wi-Fi networks.", "Internet & networking", "Wi-Fi", "3", "http://research.microsoft.com/en-us/um/people/bahl/full-bio.aspx"
"Rudolf Bayer", "1969", "Co-created the #{B-Tree} data structure - a self-balancing tree structure that is common in #{databases} and filesystems.", "Algorithms & data structures, Databases", "B-tree", "3", "https://en.wikipedia.org/wiki/B-tree"
"Rudolf Bayer", "1972", "Co-created the #{UB-Tree} data structure - a variation of the #{B-Tree} for multidimensional data.", "Algorithms & data structures, Databases", "B-tree, UB-tree", "2", "https://en.wikipedia.org/wiki/UB-tree"
"Rudolf Bayer", "1972", "Created the #{Red-black tree} data structure - a self-balancing binary search tree that is the basis for many higher-level data structures because of it's performance guarantees.", "Algorithms & data structures", "Red-black tree", "3", "https://en.wikipedia.org/wiki/Red%E2%80%93black_tree"
"Gordon Bell", "1960", "Created the I/O subsystem of the #{PDP-1|PDP} minicomputer, including the first #{Universal asynchronous receiver/transmitter|UART} (UART). A UART is a hardware device for translating data that is a common component of modern microcontrollers.", "Early computers", "Minicomputer, UART, PDP", "2", "https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter"
"David Blei", "2003", "Co-developed 'latent Dirichlet allocation' in a highly influential paper. LDA is a generative statistical model that is common in #{natural language processing}.", "Algorithms & data structures, Publications", "Natural language processing", "2", "https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation"
"Manuel Blum", "1967", "Developed an axiomatic complexity theory which introduced the Blum axioms and several influential theorems in compuational complexity.", "Theoretical computer science", "Complexity, Blum axioms", "3", "https://en.wikipedia.org/wiki/Blum_axioms"
"Tommy Flowers", "1943", "Designed #{Colossus}, the world's first programmable, electronic, digital computer. Colossus was used for the collection of highly-secretive German communications during World War II.", "Early computers", "Colossus", "4", "https://en.wikipedia.org/wiki/Colossus_computer"
"Corrado Böhm", "1951", "Developed Böhm's Language, the first full #{meta-circular} compiler. A meta-circular evaluator is one whose features are restatements of existing features of the host language.", "Programming languages, Programming paradigms", "Meta-circular evaluator", "3", "https://en.wikipedia.org/wiki/B%C3%B6hm%27s_language"
"Corrado Böhm", "1966", "Co-published the 'Structured Program Theorem', which paved the way for the #{structured programming} paradigm. Structured programming encourages the use of sub routines, blocks and loops over simple jumps like #{goto}.", "Programming Paradigms", "Structured programming", "4", "https://en.wikipedia.org/wiki/Structured_program_theorem#Implications_and_refinements"
"Corrado Böhm", "1968", "Published Böhm's Theorem, which proved that two terms of #{Lambda calculus} having syntactically different normal forms with respect to β-η-reduction cannot be consistently equated.", "Theoretical computer science, Programming paradigms", "Functional programming, Lambda calculus", "2", "http://www.corradobohm.it/Corrado_Bohm/Biography.html"
"Gottlob Frege", "1879", "Published Begriffsschrift, which formalised the foundations for first-order #{logic}. First-order logic is an important pre-cursor to the development of theories of computation and eventually programming languages.", "Foundations, Publications", "Mathematics, Logic", "5", "https://en.wikipedia.org/wiki/First-order_logic"
"Seymour Ginsberg", "1958", "Proved that 'don't care' circuit minimization does not necessarily yield a minimal result. 'Don't Care' terms are used in digital logic to formulate appropriate circuit designs.", "Early computers", "Logic, Circuit design", "2", "https://en.wikipedia.org/wiki/Don%27t-care_term"
"Seymour Ginsberg", "1964", "Became the first person to observe the connection betwen context-free languages and #{ALGOL}-like languages. This shifted the focus of the field of formal language theory to programming language research.", "Foundations, Programming languages", "Context-free languages, Formal languages, ALGOL", "4", "https://en.wikipedia.org/wiki/Context-free_grammar"
"Seymour Ginsberg", "1967", "Co-created the 'abstract family of languages' mathematical notation. This notation generalizes characteristics common to the regular languages, the context-free languages and other families of formal languages.", "Algorithms & data structures, Foundations, Programming languages", "Context-free languages, Abstract family of languages, Formal languages", "3", "https://en.wikipedia.org/wiki/Abstract_family_of_languages"
"Kurt Gödel", "1931", "Published the #{incompleteness theorems}, which helped the ground-work for the very notion of computability (see #{Entscheidungsproblem}). This work greatly influenced future work in theoretical computer science.", "Foundations, Theoretical computer science", "Mathematics, Incompleteness theorems, Logic", "5", "https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems"
"Kurt Gödel", "1931", "Invented the #{Gödel numbering} function, which assigns the symbols of some formal language to a unique natural number. Gödel numbers were used heavily in mathematical proofs during the early days of #{theoretical computer science}.", "Foundations, Theoretical computer science", "Mathematics, Gödel Numbering, Formal languages", "3", "https://en.wikipedia.org/wiki/G%C3%B6del_numbering"
"Lois Haibt", "1957", "Became one of the ten-person team who created the original #{FORTRAN} compiler. Haibt was tasked with developing the control-flow subsystem.", "Programming languages, Women in computing", "FORTRAN", "3", "https://en.wikipedia.org/wiki/Fortran"
"Margaret Hamilton", "1965", "Became director of software programming for Apollo and Skylab. This included the Apollo 11 mission, which was the first to successfully land Humans on the moon.", "Women in computing, Early Computers", "Software engineering", "3", "https://en.wikipedia.org/wiki/Apollo_Guidance_Computer"
"Margaret Hamilton", "1971", "Helped to popularize the term '#{Software Engineering}', which helped distinguish computer programming from other engineering disciplines.", "Women in computing", "Software engineering", "2", "https://en.wikipedia.org/wiki/Software_engineering"
"C. A. R. Hoare", "1959", "Invented Quicksort, a non-stable comparison sorting #{algorithm|Algorithms & data structures}. Quicksort, on average, displays O(n log n) performance making it very practical for everyday usage.", "Algorithms & data structures", "Quicksort", "4", "https://en.wikipedia.org/wiki/Quicksort"
"C. A. R. Hoare", "1960", "Invented Quickselect, a selection #{algorithm|Algorithms & data structures} based on #{Quicksort} that finds the Kth smallest item in an unordered list. It, On average, displays O(n) performance.", "Algorithms & data structures", "Quickselect", "3", "https://en.wikipedia.org/wiki/Quickselect"
"C. A. R. Hoare", "1969", "Invented #{Hoare logic}, a formal system with a set of logical rules for reasoning rigorously about the correctness of computer programs.", "Theoretical computer science", "Logic, Hoare logic", "3", "https://en.wikipedia.org/wiki/Hoare_logic"
"C. A. R. Hoare", "1973", "Along with #{Per Brinch Hansen}, invented #{Monitors}, a construct for allowing #{threads|Concurrency} to have mutual exclusion and the ability to wait/block for conditions to become true.", "Concurrency", "Monitors", "3", "https://en.wikipedia.org/wiki/Monitor_(synchronization)"
"Herman Hollerith", "1884", "Invented a tabulating machine that allowed the recording of data on a medium that could then be read by a machine. This invention would mark the beginning of the modern era of data processing and computation.", "Foundations, Early computers", "Punch cards", "5", "https://en.wikipedia.org/wiki/Unit_record_equipment"
"Herman Hollerith", "1889", "Entered a contract with the US Census Office to build tabulating machines for the 1890 census. It would save over two years of processing time of census results. His company would eventually be renamed to International Business Machines (IBM).", "Early computers", "Punch cards", "5", "https://en.wikipedia.org/wiki/1890_United_States_Census"
"Herman Hollerith", "1901", "Invented the first keypunch, a device for punching holes in #{paper card|Punch cards} based on the users interation with an input device (such as a keyboard).", "Early computers", "Punch cards", "3", "https://en.wikipedia.org/wiki/Keypunch"
"Grace Hopper", "1952", "Developed a compiler for the A-0 programming language. This was the first compiler ever developed for a modern computer. It's function was simple and would perhaps be considered a linker or loader in modern terms.", "Programming languages, Women in computing", "UNIVAC, A-0", "5", "https://en.wikipedia.org/wiki/A-0_programming_language"
"Grace Hopper", "1959", "Developed a compiler for the FLOW-MATIC (B-0) programming language. The FLOW-MATIC language design had a strong influence on #{COBOL}.", "Programming languages, Women in computing", "UNIVAC, FLOW-MATIC", "4", "https://en.wikipedia.org/wiki/FLOW-MATIC"
"Grace Hopper", "1959", "Joined the committee who designed the #{COBOL} programming language. COBOL used many ideas from Grace Hopper's earlier language #{FLOW-MATIC}, including the use of an English-like syntax.", "Programming languages, Women in computing", "COBOL, FLOW-MATIC", "4", "https://en.wikipedia.org/wiki/COBOL"
"Cuthbert Hurd", "1952", "Was a leading voice in the development of the #{IBM 701} computer, which was the first commercial #{stored-program computer}.", "Early computers", "IBM 701, Stored-program computer", "3", "https://en.wikipedia.org/wiki/IBM_701"
"Cuthbert Hurd", "1953", "Was important in the development of the IBM 650 computer, which was the first mass-produced computer with nearly 2,000 systems shipped by the early 1960s.", "Early computers", "IBM 650", "2", "https://en.wikipedia.org/wiki/IBM_650"
"Kenneth E. Iverson", "1955", "Established the first graduate course in computer science at Harvard University. It was called 'Automatic Data Processing'.", "Algorithms & data structures", "", "2", "https://en.wikipedia.org/wiki/Kenneth_E._Iverson#Harvard_.281955.E2.80.931960.29"
"Kenneth E. Iverson", "1964", "Whilst at IBM, developed the #{APL} (A Programming Language) programming language. APL used a wide array of characters in it's syntax which led to very concise code - even requiring a specially design keyboard in many cases! It would prove to be very influential to future programming languages.", "Programming paradigms, Programming languages", "APL", "4", "https://en.wikipedia.org/wiki/APL_(programming_language)"
"Kenneth E. Iverson", "1990", "Along with Roger Hui, developed the J programming language. J was a dialect of #{APL} that used only the ASCII characters. J also took ideas from the #{FP} and #{FL} languages of John Backus.", "Programming paradigms, Programming languages", "APL, J, FL, FP", "2", "https://en.wikipedia.org/wiki/J_(programming_language)"
"Joseph Marie Jacquard", "1801", "Demonstracted the Jacquard Loom, a programmable mechanical loom intended to simplify the process of manufacturing textiles. The loom was programmed via a series of punched cards. This would greatly inspire future inventors such as #{Charles Babbage} (#{Analytical Engine}) and #{Herman Hollerith} (#{Punch cards}).", "Early computers, Foundations", "Punch cards, Jacquard Loom", "5", "https://en.wikipedia.org/wiki/Jacquard_loom"
"Maurice Karnaugh", "1953", "Developed the Karnaugh Map, a pictorial method of simplifying boolean algebra exressions. Karnaugh Maps were to prove useful in early digital circuit design.", "Foundations", "Logic, Mathematics, Circuit design", "3", "https://en.wikipedia.org/wiki/Karnaugh_map"
"Jacek Karpiński", "1966", "Along with Ryszard S. Michalski, invented an early #{machine learning} algorithm for recognition of hand-written alphanumeric characters.", "Artificial intelligence", "Machine learning", "3", "https://en.wikipedia.org/wiki/Ryszard_S._Michalski#Biography"
"Jacek Karpiński", "1973", "Led the team who created the K-202 #{minicomputer}, an early 16-bit computer of which roughly 30 units were shipped.", "Early computers", "Minicomputer, K-202", "3", "https://en.wikipedia.org/wiki/K-202"
"Alan Kay", "1966", "Coined the term '#{Object-oriented programming}, a programming paradigm based on stateful objects that interact with each other via message-passing.", "Programming paradigms", "Object-oriented programming", "4", "https://en.wikipedia.org/wiki/Object-oriented_programming#History"
"Alan Kay", "1972", "Designed and implemented Smalltalk-72, an early version of the #{Smalltalk} programming language. Smalltalk would be hugely influential to future #{object-oriented programming} languages.", "Programming paradigms, Programming Languages", "Smalltalk, Object-oriented programming", "4", "https://en.wikipedia.org/wiki/Smalltalk"
"Alan Kay", "1980", "Led the team who developed Smalltalk-80, a version of the #{Smalltalk} programming language.", "Programming Languages", "Smalltalk, Object-oriented programming", "3", "https://en.wikipedia.org/wiki/Smalltalk"
"Alan Kay", "1995", "Along with Dan Ingells, co-designed the Squeak programming language, an open source dialect of #{Smalltalk}.", "Programming Languages", "Object-oriented programming, Smalltalk, Squeak", "2", "https://en.wikipedia.org/wiki/Squeak"
"Stephen Cole Kleene", "1935", "Along with J. B. Rosser, proved that the original #{lambda calculus} was logically inconsistent, which prompted #{Alonzo Church} to publish a simplified system we now call untyped lambda calculus.", "Theoretical computer science", "Lambda calculus", "3", "https://en.wikipedia.org/wiki/Kleene%E2%80%93Rosser_paradox"
"Stephen Cole Kleene", "1938", "Made several fundamental contributions to recursion theory including Kleene's Recursion Theorem and the Kleene Hierarchy. This helped solidify the notion of computable recursive functions.", "Algorithms & data structures, Theoretical computer science", "Functional programming", "5", "https://en.wikipedia.org/wiki/Kleene%27s_recursion_theorem"
"Stephen Cole Kleene", "1956", "Invented #{regular expressions}, a pattern-matching system that describes the set of regular languages. They would be augmented and integrated into many programming languages and text editors for pattern matching on strings.", "Theoretical computer science, Programming languages", "Regular expressions", "5", "https://en.wikipedia.org/wiki/Regular_expression"
"Donald Knuth", "1962", "Published the first volume of his seminal work, #{The Art of Computer Programming}. TAOCP is still seen as the most comprehensive coverage of computer algorithms and their #{analysis|Big-O notation}.", "Algorithms & data structures, Publications", "The Art of Computer Programming, Big-O notation", "4", "https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming"
"Donald Knuth", "1976", "Published a paper that re-introduced and popularised the Big-O, Big-theta and Big-omega notations for the asymtotic analysis of algorithms. These mathematical notations are still the industry standard for denoting the performance of algorithms.", "Algorithms & data structures, Publications", "Big-O notation", "4", "https://en.wikipedia.org/wiki/Big_O_notation#History_.28Bachmann.E2.80.93Landau.2C_Hardy.2C_and_Vinogradov_notations.29"
"Donald Knuth", "1978", "Developed Tex, a software system for simplifying the process of typesetting books. Tex would become an industry-standard for formatting technical papers.", "Publications", "Tex", "2", "https://en.wikipedia.org/wiki/TeX"
"Leslie Lamport", "1979", "Published the first of several major papers on the topic of distributed systems. A distributed system is a model in which components located on networked computers communicate and coordinate their actions by passing messages. These papers remain some of the most cited in all of computer science.", "Internet & networking, Publications", "Distributed computing", "4", "https://en.wikipedia.org/wiki/Leslie_Lamport#Career"
"Leslie Lamport", "1985", "Developed LaTeX, a typesetting system that comprises of a number of macros for #{Tex}. LaTeX is very popular in academia to this day.", "Publications", "LaTeX, Tex", "3", "https://en.wikipedia.org/wiki/LaTeX"
"Sergey Lebedev", "1950", "Designed the MESM mainframe computer. It was the first electronic computer in continental Europe and could perform roughly 3,000 operations per minute (a lot for the time).", "Early computers", "BESM", "3", "https://en.wikipedia.org/wiki/History_of_computer_hardware_in_Soviet_Bloc_countries#MESM"
"Sergey Lebedev", "1952", "Led the team who developed the BESM-1 mainframe computer, based on the earlier MESM computer. In it's day, it was the fastest computer in Europe.", "Early computers", "BESM", "3", "https://en.wikipedia.org/wiki/History_of_computer_hardware_in_Soviet_Bloc_countries#MESM"
"Sergey Lebedev", "1965", "Chief Designer for the BESM-6 mainframe computer. It was in production for 20 years and became very popular in Soviet Russia.", "Early computers", "BESM", "3", "http://www.computer-museum.ru/english/besm6.htm"
"Gottfried Wilhelm Leibniz", "1679", "Inspired by ancient texts, divised the modern binary (base-2) number system. The binary system is used to represent all information in modern computers.", "Foundations", "Mathematics, Binary", "5", "https://en.wikipedia.org/wiki/Binary_number"
"Gottfried Wilhelm Leibniz", "1685", "Made several advances towards the notion of symbolic #{logic} and first-order logic, especially in his 'Characteristica universalis', a formal language for expressing mathematical and metaphysical concepts. This would influence #{Gottlob Frege} and #{George Boole}.", "Foundations", "Mathematics, Logic, Formal languages", "5", "https://en.wikipedia.org/wiki/Characteristica_universalis"
"J. C. R. Licklider", "1960", "Published 'Man-Computer Symbiosis', a publication that foretold and invenstigated the modern computer revolution and Human-Computer interaction. It inspired many concepts such as the graphical user interface and the #{ARPANET}.", "Publications, Internet & networking, Computer graphics", "Human-computer interaction, ARPANET", "4", "https://en.wikipedia.org/wiki/Man-Computer_Symbiosis"
"J. C. R. Licklider", "1963", "Envisioned the 'Intergalactic Computer Network', the main and essential medium of informational interaction for governments, institutions, corporations, and individuals. It would directly inspire the #{ARPANET}, the pre-decessor of the #{Internet|Internet & networking}.", "Publications, Internet & networking", "ARPANET", "4", "https://en.wikipedia.org/wiki/Intergalactic_Computer_Network"
"J. C. R. Licklider", "1963", "Funded and provided resources for many early advances in interactive computing, most notably with #{Douglas Engelbart} at the Augmentation Research Center where the #{computer mouse|Mouse} was invented.", "Computer graphics", "Mouse, Human-computer interaction", "3", "https://en.wikipedia.org/wiki/J._C._R._Licklider#Work"
"Ramon Llull", "1290", "Devised a system of #{logic} that consisted of organizing concepts using devices such as trees, ladders, and wheels. It would greatly influence future logicians, especially #{Gottfried Leibniz}.", "Foundations", "Mathematics, Logic", "4", "https://en.wikipedia.org/wiki/Ramon_Llull#Llull.27s_Art"
"Ada Lovelace", "1842", "Translated and expanded an article from the Italian Luigi Menabrae on the topic of #{Charles Babbage}'s #{Analytical Engine}. Her expansions were extremely detailed and included an algorithm to compute Bernoulli numbers by the theoretical machine. For this she is often called the world's first computer programmer.", "Foundations, Publications, Women in computing", "Mathematics, Anaytical Engine", "5", "https://en.wikipedia.org/wiki/Ada_Lovelace#Work"
"John Mauchly", "1942", "Wrote a memo proposing the idea of building a general-purpose electronic computer emphasizing the enormous speed advantage that could be gained by using digital electronics with no moving parts. It was well-received but not entirely understood.", "Publications, Early computers", "ENIAC", "3", "http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2600-Vacuum-Tubes-Calculating.pdf"
"John Mauchly", "1944", "Led the conceptual design of #{ENIAC}, the worlds first general-purpose electronic computer. It was #{Turing-complete|Turing-completeness}, digital and weighed nearly 20 tonnes. It was dubbed by the press as a 'Giant Brain'.", "Early computers", "ENIAC", "3", "https://en.wikipedia.org/wiki/ENIAC"
"John Mauchly", "1945", "Along with #{J. Presper Eckert}, independently developed the idea of the #{stored-program computer} (now known as Von Neumann architecture) whilst designing the #{EDVAC} computer. The EDVAC, a general-purpose binary computer, was a successor to the #{ENIAC}.", "Early computers", "ENIAC, EDVAC, Stored-program computer", "5", "https://en.wikipedia.org/wiki/EDVAC"
"John Mauchly", "1949", "Along with #{J. Presper Eckert}, produced the #{BINAC} binary #{stored-program computer} - one of the earliest business computer systems. The BINAC was the first machine to include a user manual. It was not widely used.", "Early computers", "BINAC, Stored-program computer", "3", "https://en.wikipedia.org/wiki/BINAC"
"John Mauchly", "1949", "Proposed the #{UNIVAC} SHORT CODE, the first programming language intended to be used on an electronic computer. It was implemented as a pseudocode interpreter.", "Programming languages", "UNIVAC", "3", "https://www.computer.org/csdl/mags/an/1988/01/man1988010007-abs.html"
"John Mauchly", "1951", "Along with #{J. Presper Eckert}, designed the #{UNIVAC I|UNIVAC} binary #{stored-program computer} - one of the earliest computer systems for commercial use. With a sample of just 1% of the voting population it famously predicted an Eisenhower landslide while the conventional wisdom favored Stevenson.", "Early Computers", "UNIVAC, Stored-program computer", "5", "https://en.wikipedia.org/wiki/UNIVAC_I"
"John McCarthy", "1956", "Attended the famous Dartmouth Conferences where he coined the term '#{artificial intelligence}'. The Dartmouth Conferences were effectively a two month brainstorming session on topics including artificial intelligence, #{neural networks}, #{theory of computation} and #{natural language processing}.", "Programming paradigms, Artificial intelligence, Theoretical computer science", "Natural language processing, Neural networks", "3", "https://en.wikipedia.org/wiki/Dartmouth_Conferences"
"John McCarthy", "1958", "In his paper 'Programs with Common Sense', proposed the 'Advice Taker'; a hypothetical computer program which used #{logic} to represent information and draw conclusions. It was an early example of #{artificial intelligence}.", "Artificial intelligence, Publications", "Logic", "2", "https://en.wikipedia.org/wiki/Advice_taker"
"John McCarthy", "1958", "Invented #{Lisp}, a high-level programming language based on the #{lambda calculus}. Lisp became popular in #{artificial intelligence} research and popularised many concepts in programming languages such as dynamic typing, linked lists, higher-order functions and recursion.", "Programming paradigms, Programming languages", "Functional programming, Lisp", "5", "https://en.wikipedia.org/wiki/Lisp_(programming_language)"
"John McCarthy", "1959", "Invented a primitive method of #{garbage collection} to abstract away manual memory management in #{Lisp}. Garbage collection is a form of automatic memory management that attempts to free memory allocated to objects that are no longer in use in a running computer program.", "Programming languages", "Lisp, Garbage collection", "4", "https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"
"John McCarthy", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential programming language which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Programming paradigms, Programming languages", "ALGOL", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"John McCarthy", "1961", "Proposed the idea of 'Utility Computing', a business model in which computing resources are supplied to customers on a by-demand basis. It would go on to inspire ideas in time-sharing models such as cloud computing.", "Publications, Internet & networking", "Time-sharing", "3", "https://en.wikipedia.org/wiki/Utility_computing"
"Marvin Minsky", "1951", "Invented Stochastic Neural-Analog Reinforcement Computer (SNARC), the first randomly wired neural network learning machine. SNARC was based on reinforcing the synaptic connections that contributed to recent reactions.", "Algorithms & data structures, Early computers, Artificial intelligence", "Neural networks, SNARC", "2", "http://web.media.mit.edu/~minsky/minskybiog.html"
"Marvin Minsky", "1956", "Attended the famous Dartmouth Conferences that sparked the beginning of the field of #{artificial intelligence}. The Dartmouth Conferences were effectively a two month brainstorming session on topics including artificial intelligence, #{neural networks}, #{theory of computation} and #{natural language processing}.", "Artificial intelligence, Theoretical computer science, Programming paradigms", "Natural language processing, Neural networks", "3", "https://en.wikipedia.org/wiki/Dartmouth_Conferences"
"Marvin Minsky", "1969", "Co-authored (with #{Seymour Papert}) Perceptrons, a foundational study into artificial #{neural networks}. The book has caused much controversy as it's pessimistic predictions may have helped bring upon the 'AI winter' of the 1980's.", "Artificial intelligence, Publications", "Neural networks", "2", "https://en.wikipedia.org/wiki/Perceptrons_(book)"
"Marvin Minsky", "1972", "Co-invented the first #{Logo} turtle device, an educational robot that was capable of interpreting the Logo programming language. The robots were capable of outputting results onto a peice of paper via a mounted pen.", "Programming languages", "Logo", "2", "https://en.wikipedia.org/wiki/Turtle_(robot)"
"Peter Naur", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential programming language which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Programming paradigms, Programming languages", "ALGOL", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"Peter Naur", "1963", "Extended the #{Backus-Naur Form} for use in #{ALGOL} 60. BNF is a notation for context-free grammars which is used to describe the syntax of #{programming languages}.", "Programming languages", "ALGOL, Backus-Naur form, Context-free languages", "4", "https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"
"Max Newman", "1935", "Presented several lectures at Cambridge on #{logic} and #{Kurt Gödel}'s #{incompleteness theorem}, which inspired #{Alan Turing} to pursue pioneering work on the #{Entscheidungsproblem} using a #{hypothetical computing machine|Turing machines}.", "Foundations, Publications", "Entscheidungsproblem, Mathematics, Logic", "3", "https://en.wikipedia.org/wiki/Entscheidungsproblem"
"Max Newman", "1943", "Posed problems that would lead and influence the design of the #{Colossus} computer at Bletchley Park. Colossus, designed by #{Tommy Flowers}, was the world's first programmable, electronic, digital computer.", "Early computers", "Colossus, Bletchley park", "3", "https://en.wikipedia.org/wiki/Colossus_computer"
"John von Neumann", "1945", "Invented #{Merge sort}, an efficient recursive sorting algorithm in which two halves of an array are sorted recursively and then merged. Mergesort runs in O(n log n) time.", "Algorithms & data structures", "Merge sort", "4", "https://en.wikipedia.org/wiki/Merge_sort"
"John von Neumann", "1950", "Made several contributions to random number generation, specifically his algorithm for 'fair coin' simulation, which are now implemented in hardware random number generators. Neumann also contributed to the 'Monte Carlo method', although his approach is now seen as a historical curiosity more than a practical approach.", "Algorithms & data structures", "Random number generation", "2", "https://en.wikipedia.org/wiki/Monte_Carlo_method"
"John von Neumann", "1950", "Published the 'First draft of a report on the #{EDVAC}', an incomplete 101-page document which contains the first published description of the logical design of a computer using the #{stored-program|Stored-program computer} concept. Although the concept of stored-program computers had already existed, the concept is now universally and controversially known as 'Von Neumann Architecture'.", "Early computers, Publications", "Stored-program computer, EDVAC", "4", "https://en.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC"
"John von Neumann", "1948", "Acted as consultant for several improvements made to the #{ENIAC} computer. These improvements reduced the speed of the ENIAC by a factor of six, but also reduced the reprogramming time to hours instead of days and so it was considered well worth the loss of performance.", "Early computers", "ENIAC", "2", "https://en.wikipedia.org/wiki/ENIAC#Improvements"
"John von Neumann", "1949", "Along with Stanislaw Ulam, founded the field of Cellular Automata - self-replicating systems with a grid of cells that can be in a finite number of states. Cellular automata are commonly used to demonstrate the ability for complexity to arise from simple beginnings. His early work in this field is also considered by many to contain the world's first computer virus.", "Algorithms & data structures", "Cellular automata", "3", "https://en.wikipedia.org/wiki/IAS_machine"
"John von Neumann", "1952", "Designed the 'IAS Machine', an early binary, electronic #{stored-program computer}. It was one of the first stored-program computers in operation in the USA.", "Early computers", "IAS Machine, Stored-program computer", "3", "https://en.wikipedia.org/wiki/IAS_machine"
"Kristen Nygaard", "1962", "Invented #{Simula I|Simula} (with #{Ole-Johan Dahl}) as a superset of #{ALGOL 60|ALGOL} for simulating discrete event systems.", "Programming languages, Programming paradigms", "Object-oriented programming, Simula, ALGOL", "3", "https://en.wikipedia.org/wiki/Simula"
"Kristen Nygaard", "1967", "Published #{Simula 67|Simula} (with #{Ole-Johan Dahl}), an updated version of #{Simula I|Simula}. Simula 67 is considered the first #{object-oriented programming} language as it introduced many OO concepts such as objects, classes, subclasses and inheritance.", "Programming languages, Programming paradigms", "Object-oriented programming, Simula, ALGOL", "5", "https://en.wikipedia.org/wiki/Simula"
"Ole-Johan Dahl", "1962", "Invented #{Simula I|Simula} (with #{Kristen Nygaard}) as a superset of #{ALGOL 60|ALGOL} for simulating discrete event systems.", "Programming languages, Programming paradigms", "Object-oriented programming, Simula, ALGOL", "3", "https://en.wikipedia.org/wiki/Simula"
"Ole-Johan Dahl", "1967", "Published #{Simula 67|Simula} (with #{Kristen Nygaard}), an updated version of #{Simula I|Simula}. Simula 67 is considered the first #{object-oriented programming} language as it introduced many OO concepts such as objects, classes, subclasses and inheritance.", "Programming languages, Programming paradigms", "Object-oriented programming, Simula, ALGOL", "5", "https://en.wikipedia.org/wiki/Simula"
"James Cooley", "1965", "Along with #{John W. Tukey}, (re)invented and popularized a Fast fourier transform (FFT) algorithm. FFT's are widely used for many applications in engineering, science, and mathematics.", "Algorithms & data structures", "Fast fourier transform", "3", "https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm"
"John W. Tukey", "1945", "Coined the term 'bit' as a contraction of the term 'binary digit'. A bit is the most basic unit of information in computer systems.", "Foundations", "Mathematics, Bit", "2", "http://www.linfo.org/bit.html"
"John W. Tukey", "1957", "Coined the term 'software' in his paper 'The Teaching of Concrete Mathematics'. Although it is claimed the term already existed since atleast 1953, Tukey's paper is the earliest known publication containing it.", "Algorithms & data structures, Publications", "Mathematics, Software", "2", "https://en.wikipedia.org/wiki/Software"
"John W. Tukey", "1965", "Along with #{James Cooley}, (re)invented and popularized a Fast fourier transform (FFT) algorithm. FFT's are widely used for many applications in engineering, science, and mathematics.", "Algorithms & data structures", "Fast fourier transform", "3", "https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm"
"Blaise Pascal", "1642", "Whilst still a teenager, invented the mechanical calculator (AKA Pascaline), a device for automatically performing the basic operations of arithmetic. This would go on to influence future efforts like #{Charles Babbage}'s #{Difference engine}.", "Early computers", "Mechanical calculator", "5", "https://en.wikipedia.org/wiki/Mechanical_calculator"
"Emil Leon Post", "1936", "Developed, independently of #{Alan Turing} and #{Alonzo Church}, a mathematical model of computation that he called 'Formulation 1', although it is now known as the #{Post-Turing Machine}.", "Theoretical computer science, Foundations", "Mathematics, Post-Turing machine", "5", "https://en.wikipedia.org/wiki/Post%E2%80%93Turing_machine"
"Emil Leon Post", "1943", "Published the 'Post Canonical Systen', a #{Turing-complete|Turing-completeness} string-manipulation system that can generate formal languages. This helped formalise many ideas used in programming language grammars today.", "Theoretical computer science, Publications", "Formal languages", "4", "https://en.wikipedia.org/wiki/Post_canonical_system"
"Emil Leon Post", "1946", "Posed the 'Post correspondence problem', an undecidable decision-problem that is simpler than the #{halting problem} and the #{Entscheidungsproblem}. An undecidable problem is one for which there is no known algorithm that always leads to a correct answer.", "Algorithms & data structures, Theoretical computer science, Publications", "Formal languages, Entscheidungsproblem", "4", "https://en.wikipedia.org/wiki/Post_correspondence_problem"
"Dennis Ritchie", "1969", "Along with #{Ken Thompson}, developed the first version of #{Unix}, a multitasking operating system. Unix, hailed as a hallmark of beautiful software design, is still in use by millions of users today.", "Operating systems", "Unix", "5", "https://en.wikipedia.org/wiki/Unix"
"Dennis Ritchie", "1972", "Developed the first version of #{C} - a high-level, imperative programming language - on a #{PDP-11|PDP} minicomputer. C has since become one of the most well-known programming languages of all time.", " Programming languages", "C", "5", "https://en.wikipedia.org/wiki/C_(programming_language)"
"Dennis Ritchie", "1978", "Co-authored the book 'The C Programming Language', also known as simply K&R. It quickly became the de facto standard for C programming and has since, because of it's clear and concise style, become a model for technical writing.", "Programming languages, Publications", "C", "4", "https://en.wikipedia.org/wiki/The_C_Programming_Language"
"Ken Thompson", "1968", "Wrote a version of the QED text editor that allowed users to search text using regular expressions. This was the first text editor with such functionality.", "Algorithms & data structures", "Regular expressions, Text editors", "3", "https://en.wikipedia.org/wiki/QED_(text_editor)"
"Ken Thompson", "1968", "Developed 'Thompson's Construction Algorithm' used for converting regular expression into nondeterministic finite automaton, which allowed for faster expression matching.", "Algorithms & data structures", "Regular expressions", "2", "https://en.wikipedia.org/wiki/Thompson%27s_construction"
"Ken Thompson", "1969", "Along with #{Dennis Ritchie}, developed the first version of #{Unix}, a multitasking operating system. Unix, hailed as a hallmark of beautiful software design, is still in use by millions of users today.", "Operating systems", "Unix", "5", "https://en.wikipedia.org/wiki/Unix"
"Ken Thompson", "1969", "Created #{B}, a low-level imperative untyped programming language, for use on the #{Unix} operating system. B was the pre-decessor to #{C}. B is notable for introducing the increment and decrement shortcuts such as '++', '-=', '+=', etc.", "Programming languages", "B", "2", "https://en.wikipedia.org/wiki/B_(programming_language)"
"Ken Thompson", "1992", "Along with #{Rob Pike}, created the #{UTF-8} encoding scheme. UTF-8 supports all code-points of the Unicode character set and is the dominant encoding scheme on the World Wide Web accounting for billions of web pages.", "Publications", "UTF-8", "3", "https://en.wikipedia.org/wiki/UTF-8"
"Ken Thompson", "2007", "Along with Robert Griesemer and #{Rob Pike}, designed the #{Go} programming language. Go was motivated by the designers shared disliking of the complexity of #{C++}. Go is compiled, statically-typed and uses an #{ALGOL}-like syntax.", "Programming languages", "Go", "3", "https://en.wikipedia.org/wiki/Go_(programming_language)"
"Saul Rosen", "1957", "Designed the software (including a #{FORTRAN} compiler) for the first fully-commercial transistorized computer; the Philco Transac S-2000.", "Early computers", "FORTRAN, Transistor", "4", "https://www.rcac.purdue.edu/about/saul-rosen/"
"Bertrand Russell", "1908", "Introduced the notion of #{type theory} in an attempt to avoid paradoxes found in many formal systems of logic and rewrite systems. Type theory is closely ralated to #{type systems}, which are features of programming languages to help reduce bugs and provide rigidity to programs.", "Programming paradigms, Foundations", "Type theory, Mathematics, Logic, Type systems, Formal languages", "4", "https://en.wikipedia.org/wiki/Type_theory"
"Bertrand Russell", "1910", "Along with Alfred North Whitehead, introduced the notion of a #{type system} in their seminal work on mathematical logic: Principia Mathematica.", "Programming paradigms, Foundations", "Type theory, Type systems, Mathematics, Logic, Formal languages", "4", "https://en.wikipedia.org/wiki/Principia_Mathematica"
"Gerard Salton", "1975", "Along with Andrew Wong and Chungshu Yang, developed the Vector Space model for information retrieval. This model is still used today to index documents and shows up many softwares, relevancy rankings and search engines.", "Databases", "Search engines, Mathematics, Vector Space Model", "3", "https://en.wikipedia.org/wiki/Vector_space_model"
"Gerard Salton", "1975", "Proposed the Inverted Index - a data structure for mapping content to it's place in a database file. This structure is now central to most retrieval systems such as search engines and databases.", "Algorithms & data structures, Databases", "Search engines, Indexing", "3", "https://en.wikipedia.org/wiki/Inverted_index"
"Gerard Salton", "1968", "Led the group that developed the SMART Information Retrieval System, which introduced many concepts that are now utilised by IR systems such as web search engines.", "Databases", "Search engines", "3", "https://en.wikipedia.org/wiki/SMART_Information_Retrieval_System"
"Claude Shannon", "1937", "Vastly improved #{digital circuit design|circuit design} when, at the age of 21, demonstrated that electrical applications of Boolean algebra could construct any logical, numerical relationship.", "Foundations, Early computers", "Logic, Circuit design", "5", "https://en.wikipedia.org/wiki/Claude_Shannon#Logic_Circuits"
"Claude Shannon", "1948", "Published the landmark paper 'A Mathematical Theory of Communication' that founded information theory. This theory is now applied to many areas such as #{cryptography}, #{natural language processing} and data compression (think ZIP files, MP3s, etc).", "Foundations", "Cryptography, Mathematics, Natural language processing, Information theory", "5", "https://en.wikipedia.org/wiki/Information_theory"
"Claude Shannon", "1950", "Created Theseus, a magnetic mouse that could find it's way out of a configurable maze of 25 walls. It was one of the first physical applications of #{artificial intelligence}.", "Artificial intelligence", "", "2", "https://web.archive.org/web/20120722011711/http://www.alcatel-lucent.com/wps/portal/!ut/p/kcxml/04_Sj9SPykssy0xPLMnMz0vM0Y_QjzKLd4w39w3RL8h2VAQAGOJBYA!!?LMSG_CABINET=Bell_Labs&LMSG_CONTENT_FILE=News_Features/News_Feature_Detail_000025"
"Claude Shannon", "1956", "Attended the famous Dartmouth Conferences that sparked the beginning of the field of #{artificial intelligence}'. The Dartmouth Conferences were effectively a two month brainstorming session on topics including artificial intelligence, #{neural networks}, #{theory of computation} and #{natural language processing}.", "Programming paradigms, Artificial intelligence, Theoretical computer science", "Natural language processing, Neural networks", "3", "https://en.wikipedia.org/wiki/Dartmouth_Conferences"
"Herbert A. Simon", "1955", "Along with #{Allen Newell} and Cliff Shaw, created the Logic Theorist, an early #{artificial intelligence} computer program that was deliberately engineered to mimic the problem solving skills of a human being. It would eventually prove 38 of the first 52 theorems in Whitehead and #{Bertrand Russell}'s Principia Mathematica.", "Artificial intelligence", "", "3", "https://en.wikipedia.org/wiki/Logic_Theorist"
"Herbert A. Simon", "1955", "Along with #{Allen Newell} and Cliff Shaw, invented the Information Processing Language (#{IPL}) programming language. IPL, albeit in an assembly-language style, introduced the concept of list-processing that was later cleaned up and implemented into #{Lisp}.", "Artificial intelligence, Programming languages", "IPL, Lisp", "3", "https://en.wikipedia.org/wiki/Information_Processing_Language"
"Ivan Sutherland", "1963", "Created Sketchpad, a revolutionary computer program that is widely considered to be an ancestor of modern computer-aided design (CAD) software as well as a breakthrough in computer graphics in general. Sketchpad was also one of the first non-trivial examples of practical #{Object-oriented programming}.", "Computer graphics, Programming paradigms", "Human-computer interaction, Object-oriented programming", "4", "https://en.wikipedia.org/wiki/Sketchpad"
"Ivan Sutherland", "1968", "Along with his student Bob Sproull, created The Sword of Damocles - the world's first example of virtual reality and augmented reality head-mounted display. The system was crude in modern standards, only able to construct simple wireframe rooms.", "Computer Graphics", "", "3", "https://en.wikipedia.org/wiki/The_Sword_of_Damocles_(virtual_reality)"
"Alan Turing", "1936", "Published his landmark paper 'On Computable Numbers, with an Application to the #{Entscheidungsproblem}', which established the limits of the computability via simple theoretical devices that become known as #{Turing machines}. This paper, along with #{Alonzo Church}'s #{lambda calculus}, established the topic of #{theoretical computer science}. Together, these theories are now known as the Church-Turing Thesis", "Foundations, Theoretical computer science, Publications", "Turing machines, Church-turing thesis, Entscheidungsproblem, Mathematics", "5", "https://en.wikipedia.org/wiki/Turing%27s_proof"
"Alan Turing", "1939", "Designed the Bombe, an electromechanical device used by British cryptologists to help decipher German Enigma-machine-encrypted secret messages during World War II. It would have an important impact on several decisions made by the applied command during the war and many future cryptographical machines.", "Early computers", "Cryptography, Bletchley park", "4", "https://en.wikipedia.org/wiki/Bombe"
"Alan Turing", "1945", "Designed the Automatic Computing Engine (ACE), an early electronic stored-program computer. Although ACE was probably the first fully designed stored-program computer, due to wartime secrecy, Turing was prohibited from detailing his expertise in the field and thus #{John Von Neumann}'s report on the #{EDVAC} received much more publicity.", "Early computers", "ACE, Stored-program computer", "5", "https://en.wikipedia.org/wiki/Automatic_Computing_Engine"
"Alan Turing", "1950", "Published 'Computing Machinery and Intelligence', a landmark paper that addressed the problem of #{artificial intelligence}, and proposed an experiment that became known as the #{Turing test}. A Turing test is designed to test a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human.", "Artificial intelligence, Publications", "Turing test", "5", "https://en.wikipedia.org/wiki/Turing_test"
"Willis Ware", "1953", "Co-designed the JOHNNIAC, an early stored-program computer built by the RAND coporation. JOHNNIAC is arguably the longest-lived early computer, being used almost continuously from 1953 for over 13 years before finally being shut down on February 11, 1966.", "Early computers", "JOHNNIAC, Stored-program computer", "3", "https://en.wikipedia.org/wiki/JOHNNIAC"
"Willis Ware", "1973", "Led the committee who developed policy recommendations including the Code of Fair Information Practice that significantly influenced the Privacy Act of 1974, which dealt with the treatment of personal information in digital systems. It was an early and lasting effort in computer security.", "Internet & networking", "", "3", "https://en.wikipedia.org/wiki/Privacy_Act_of_1974"
"Adriaan van Wijngaarden", "1959", "Served on the design committee for #{ALGOL} 60, an incredibly influential programming language which introduced lexical scoping, code blocks and many syntactical elements common today (if, then, while, for, do, begin, end, etc).", "Programming languages, Programming paradigms", "ALGOL", "4", "https://en.wikipedia.org/wiki/ALGOL_60"
"Adriaan van Wijngaarden", "1968", "Developed the Van Wijngaarden grammar (W-grammar), a grammar which provides a technique to define potentially infinite context-free grammars in a finite number of rules. It was first used in the definition of #{ALGOL 68|ALGOL}.", "Programming languages", "ALGOL, Context-free languages, Formal languages", "2", "https://en.wikipedia.org/wiki/Van_Wijngaarden_grammar"
"Edsger W. Dijkstra", "1956", "Invented an algorithm for finding the shortest paths between nodes in a graph, which we now refer to as Dijkstra's algorithm. The algorithm has been influential to many fields, especially computer network routing.", "Algorithms & data structures, Internet & networking", "Graphs, Dijkstras algorithm", "4", "https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"
"Edsger W. Dijkstra", "1960", "Popularized the notion of recursive procedures by, along with Jaap Zonneveld, publishing a paper which showed how recursive procedures could be executed using a run-time stack of activation records. Recursion was first implemented into #{ALGOL 60|ALGOL} on Dijkstra's instruction.", "Algorithms & data structures, Programming paradigms, Publications", "Recursion, ALGOL", "3", "https://en.wikipedia.org/wiki/Edsger_W._Dijkstra#Compiler_construction_and_programming_language_research"
"Edsger W. Dijkstra", "1963", "Developed several algorithms in the field of #{concurrency}, including the #{semaphore} mechanism for a mutual exclusion (mutex) algorithm and the Dining Philosophers problem. Dijkstra also identified the deadlock problem central to concurrent computing and proposed the Banker's algorithm in order to solve it.", "Algorithms & data structures, Concurrency", "", "3", "https://en.wikipedia.org/wiki/Banker%27s_algorithm"
"Edsger W. Dijkstra", "1965", "Lead the team that developed the 'THE multiprogramming system', an early operating system. The system design was very influential for it's layered approach in which higher layers only depend upon lower layers.", "Operating systems", "", "2", "https://en.wikipedia.org/wiki/THE_multiprogramming_system"
"Edsger W. Dijkstra", "1968", "Published the influential article entitled 'Go To Statement Considered Harmful', which argued that the programming statement GOTO, found in many high-level programming languages, is a major source of errors, and should therefore be eliminated. It was an early effort in popularizing the #{structured programming} paradigm. It was perhaps more memorable to introducing the phrase 'considered harmful' into computing vernacular.", "Publications, Programming paradigms", "GOTO, Structured programming", "3", "https://en.wikipedia.org/wiki/Goto#Criticism"
"Edsger W. Dijkstra", "1974", "Introduced the concept of self-stabilization with three self-stabilizing algorithms for mutual exclusion (mutex). A self-stabilizing system will end up in a correct state, in finite steps, no matter what state it is initialized with.", "Algorithms & data structures, Concurrency", "Self-stabilisation", "3", "https://en.wikipedia.org/wiki/Banker%27s_algorithm"
"Edsger W. Dijkstra", "1975", "Introduced the notion of 'Predicate transformer semantics' (PTS) in his paper 'Guarded commands, nondeterminacy and formal derivation of programs'. PTS are important in the field of formal verification of programs, which attempts to provide mathematical proofs of program correctness. Formal verification is an important topic in algorithm design.", "Algorithms & data structures, Publications", "Formal verification, Mathematics", "2", "https://en.wikipedia.org/wiki/Predicate_transformer_semantics#Applications"
"Edsger W. Dijkstra", "1981", "Invented Smoothsort, an in-place, comparison-based sorting algorithm that runs in time O(n log n).", "Algorithms & data structures", "Smoothsort", "2", "https://en.wikipedia.org/wiki/Banker%27s_algorithm"
"Maurice Wilkes", "1946", "Led the team who created Electronic delay storage automatic calculator (#{EDSAC}), an early stored-program computer. EDSAC was one of the first stored-program computers to go into regular service, running it's first program in May 1949.", "Early computers", "EDSAC, Stored-program computer", "4", "https://en.wikipedia.org/wiki/Electronic_delay_storage_automatic_calculator"
"Maurice Wilkes", "1951", "Furthered the concept of microprogramming (and coined the term), by adding conditional execution, a concept akin to a conditional in computer software. This concept greatly simplified CPU development and was first implemented in #{EDSAC 2|EDSAC}, which Wilkes oversaw.", "Early computers, Foundations", "EDSAC, Microprogramming", "3", "https://en.wikipedia.org/wiki/Microcode"
"Maurice Wilkes", "1951", "Along with David Wheeler and Stanley Gill, authored a volume of 'Preparation of Programs for Electronic Digital Computers', which is notable for having introduced the concept of subroutine libraries. Libraries are collections of pre-written source code used to help speed up program development in a particular domain.", "Algorithms & data structures", "Libraries", "2", "https://en.wikipedia.org/wiki/Maurice_Wilkes#Awards.2C_honours_and_leadership"
"Sophie Wilson", "1980", "Designed the Acorn Microcomputer, an early 8-bit microcomputer built specifically for hobbyists. She also developed BBC BASIC, a dialect of the #{BASIC} programming language, for use on the system. It had a large impact on the fledgling field of hobbyist computing.", "Programming languages, Women in computing", "BASIC, Minicomputer", "2", "https://en.wikipedia.org/wiki/BBC_BASIC"
"Sophie Wilson", "1985", "Designed the original ARM architecture, a #{RISC} architecture for computer microprocessors. Today, over 50 billion ARM processors have been produced making it the most widely used architecture in history - mostly due to the fact that the vast majority of smartphones run on the ARM architecture.", "Women in computing", "RISC, ARM", "4", "https://en.wikipedia.org/wiki/ARM_architecture"
"Niklaus Wirth", "1970", "Designed #{Pascal}, an imperative and procedural programming language that encouraged #{structured programming}. It became very popular during the late 70s and early 80s and would go on to inspire languages like #{Java} and #{Go}.", "Programming languages, Programming paradigms", "Pascal", "4", "https://en.wikipedia.org/wiki/Pascal_(programming_language)"
"Niklaus Wirth", "1976", "Published 'Algorithms + Data Structures = Programs', a hugely influential book covering some of the fundamental topics of computer programming, particularly that algorithms and data structures are inherently related. It has been used extensively in education for over 30 years.", "Publications, Algorithms & data structures", "", "3", "https://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs"
"Niklaus Wirth", "1978", "Designed #{Modula-2|Modula}, a statically-typed imperative programming language that served as a successor to #{Pascal}.", "Programming languages", "Modula", "3", "https://en.wikipedia.org/wiki/Modula-2"
"Niklaus Wirth", "1986", "Designed #{Oberon}, an object-oriented imperative programming language that served as a successor to #{Modula-2|Modula}. Oberon's main goal was to reduce complexity in writing Modula-2 programs.", "Programming languages, Programming paradigms", "Oberon", "2", "https://en.wikipedia.org/wiki/Oberon_(programming_language)"
"Konrad Zuse", "1935", "Designed the Z1, an early mechanical computer. It was a binary computer with limited programability that read instructions from punched celluloid film. It was completely destroyed during an allied bombardment during World War II.", "Early computers", "Z1", "3", "https://en.wikipedia.org/wiki/Z1_(computer)"
"Konrad Zuse", "1939", "Designed the Z2, an early mechanical computer as a successor to the #{Z1}. It was completely destroyed during an allied bombardment during World War II.", "Early computers", "Z2", "2", "https://en.wikipedia.org/wiki/Z2_(computer)"
"Konrad Zuse", "1941", "Designed the Z3, an early electromechanical computer. It was the world's first working programmable, Turing-complete, fully automatic digital computer. Because of this, Zuse is often referred to as the inventor of the modern computer.", "Early computers, Foundations", "Z3", "5", "https://en.wikipedia.org/wiki/Z3_(computer)"
"Konrad Zuse", "1942", "Designed Plankalkül, the world' first high-level programming language. The language was not well understood at the time due to many factors including the conditions of wartime Germany. It opened the gate for future programming languages such as #{ALGOL}.", "Programming languages", "Plankalkül", "5", "https://en.wikipedia.org/wiki/Plankalk%C3%BCl"
"John G. Kemeny", "1962", "Along with #{Thomas E. Kurtz}, oversaw the implementation of the Dartmouth Time Sharing System, the world's first large-scale #{time-sharing} operating system to be successfully created. It allowed for up to 300 simultaneous users and was only decommissioned in 1999.", "Operating systems", "Time-sharing", "3", "https://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System"
"Thomas E. Kurtz", "1962", "Along with #{John G. Kemeny}, oversaw the implementation of the Dartmouth Time Sharing System, the world's first large-scale #{time-sharing} operating system to be successfully created. It allowed for up to 300 simultaneous users and was only decommissioned in 1999.", "Operating systems", "Time-sharing", "3", "https://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System"
"John G. Kemeny", "1963", "Along with #{Thomas E. Kurtz}, developed #{BASIC} (Beginners All-purpose Symbolic Instruction Code), a general-purpose programming language that intended to allow students outside of mathematics to create programs. It was incredibly popular during the 70s and 80s shipping on almost all microcomputers.", "Programming languages", "BASIC", "5", "https://en.wikipedia.org/wiki/BASIC"
"Thomas E. Kurtz", "1963", "Along with #{John G. Kemeny}, developed #{BASIC} (Beginners All-purpose Symbolic Instruction Code), a general-purpose programming language that intended to allow students outside of mathematics to create programs. It was incredibly popular during the 70s and 80s shipping on almost all microcomputers.", "Programming languages", "BASIC", "5", "https://en.wikipedia.org/wiki/BASIC"
"Judea Pearl", "1985", "Invented Bayesian networks, a mathematical formalism for defining complex probability models, as well as the principal algorithms used for inference in these models. This work would go on to be particularly important to the field of #{artificial intelligence}.", "Artificial intelligence, Algorithms & data structures", "Bayesian networks, Mathematics", "3", "https://en.wikipedia.org/wiki/Bayesian_network"
"Allen Newell", "1955", "Along with #{Herbert A. Simon} and Cliff Shaw, created the Logic Theorist, an early #{artificial intelligence} computer program that was deliberately engineered to mimic the problem solving skills of a human being. It would eventually prove 38 of the first 52 theorems in Whitehead and #{Bertrand Russell}'s Principia Mathematica.", "Artificial intelligence", "", "3", "https://en.wikipedia.org/wiki/Logic_Theorist"
"Allen Newell", "1955", "Along with #{Herbert A. Simon} and Cliff Shaw, invented the Information Processing Language (#{IPL}) programming language. IPL, albeit in an assembly-language style, introduced the concept of list-processing that was later cleaned up and implemented into #{Lisp}.", "Artificial intelligence, Programming languages", "IPL, Lisp", "3", "https://en.wikipedia.org/wiki/Information_Processing_Language"
"Allen Newell", "1956", "Attended the famous Dartmouth Conferences that sparked the beginning of the field of #{Artificial Intelligence}'. The Dartmouth Conferences were effectively a two month brainstorming session on topics including artificial intelligence, #{neural networks}, #{theory of computation} and #{natural language processing}.", "Programming paradigms, Artificial intelligence, Theoretical computer science", "Natural language processing, Neural networks", "3", "https://en.wikipedia.org/wiki/Dartmouth_Conferences"
"Nathaniel Rochester", "1956", "Attended the famous Dartmouth Conferences that sparked the beginning of the field of #{Artificial Intelligence}'. The Dartmouth Conferences were effectively a two month brainstorming session on topics including artificial intelligence, #{neural networks}, #{theory of computation} and #{natural language processing}.", "Artificial Intelligence, Theoretical computer science", "Natural language processing, Neural networks", "3", "https://en.wikipedia.org/wiki/Dartmouth_Conferences"
"Nathaniel Rochester", "1956", "Whilst at IBM, designed the world's first mass-produced, commercial #{stored-program computer}, the #{IBM 701}.", "Early computers", "Stored-program computer, IBM 701", "3", "https://en.wikipedia.org/wiki/IBM_701"
"Nathaniel Rochester", "1952", "Whilst working on the #{IBM 701}, designed the world's first assembler. An assembler is a low-level programming language that has a strong correspondence to an archictectures instruction set. This allowed programmers to use familiar words rather than binary digits.", "Programming languages, Programming paradigms", "Assembler", "4", "https://en.wikipedia.org/wiki/Assembly_language"
"Nathaniel Rochester", "1953", "Along with a small team, implemented one of the first software hash tables, a data structure that efficiently maps keys to values. Hash tables can be used to implement associative arrays, which are a fundamental data structure in modern programming languages.", "Algorithms & data structures", "Hash tables", "4", "https://en.wikipedia.org/wiki/Hash_table"
"Arthur Samuel", "1953", "Along with a small team, implemented one of the first software hash tables, a data structure that efficiently maps keys to values. Hash tables can be used to implement associative arrays, which are a fundamental data structure in modern programming languages.", "Algorithms & data structures", "Hash tables", "4", "https://en.wikipedia.org/wiki/Hash_table"
"Arthur Samuel", "1959", "Developed one of the earliest implementations of #{alpha-beta pruning}, an adversarial search algorithm that is important in machine learning.", "Algorithms & data structures, Artificial intelligence", "Alpha-beta pruning", "2", "https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning"
"Arthur Samuel", "1959", "Created one of the first machine learning softwares in his checkers program that ran on the #{IBM 701}. The program was a sensational demonstration of the advances in both hardware and skilled programming and caused IBM's stock to increase 15 points overnight.", "Artificial intelligence", "", "3", "https://en.wikipedia.org/wiki/Arthur_Samuel#Computer_checkers_.28draughts.29_development"
"Abhay Bhushan", "1971", "Published RFC 114, which specified the File Transfer Protocol (FTP) network protocol. FTP is used to transfer files from one computer to another over a TCP/IP network. It was the standard for simple file transfers during the 80s and 90s.", "Internet & networking, Publications", "FTP, TCP/IP", "3", "https://en.wikipedia.org/wiki/Arthur_Samuel#Computer_checkers_.28draughts.29_development"
"J. Presper Eckert", "1945", "Along with #{John Mauchly}, independently developed the idea of the #{stored-program computer} (now known as Von Neumann architecture) whilst designing the #{EDVAC} computer. The EDVAC, a general-purpose binary computer, was a successor to the #{ENIAC}.", "Early computers", "ENIAC, EDVAC, Stored-program computer", "5", "https://en.wikipedia.org/wiki/EDVAC"
"J. Presper Eckert", "1949", "Along with #{John Mauchly}, produced the #{BINAC} binary #{stored-program computer} - one of the earliest business computer systems. The BINAC was the first machine to include a user manual. It was not widely used.", "Early computers", "BINAC, Stored-program computer", "3", "https://en.wikipedia.org/wiki/BINAC"
"J. Presper Eckert", "1951", "Along with #{John Mauchly}, designed the #{UNIVAC I|UNIVAC} binary #{stored-program computer} - one of the earliest computer systems for commercial use. With a sample of just 1% of the voting population it famously predicted an Eisenhower landslide while the conventional wisdom favored Stevenson.", "Early Computers", "UNIVAC, Stored-program computer", "5", "https://en.wikipedia.org/wiki/UNIVAC_I"
"Rob Pike", "1982", "Along with Bart Locanthi Jr, created the Blit bitmap graphics terminal for the #{Unix} operating system. It was an early foray into graphical user interfaces for home computing.", "Computer graphics, Operating systems", "Blit, Bitmap", "2", "https://en.wikipedia.org/wiki/UTF-8"
"Rob Pike", "1992", "Along with #{Ken Thompson}, created the #{UTF-8} encoding scheme. UTF-8 supports all code-points of the Unicode character set and is the dominant encoding scheme on the World Wide Web accounting for billions of web pages.", "Publications", "UTF-8", "3", "https://en.wikipedia.org/wiki/UTF-8"
"Rob Pike", "2007", "Along with Robert Griesemer and #{Ken Thompson}, designed the #{Go} programming language. Go was motivated by the designers shared disliking of the complexity of #{C++}. Go is compiled, statically-typed and uses an #{ALGOL}-like syntax.", "Programming languages", "Go", "3", "https://en.wikipedia.org/wiki/Go_(programming_language)"
"William Shockley", "1947", "Led the team (including John Bardeen and Walter Brattain) who invented the point-contact transistor, the first type of electronic transistor ever constructed. It was to replace the bulky and fragile vacuum tubes used previously and paved the way for electronic devices to be dramatically shrunk.", "Early computers", "Transistor", "5", "https://en.wikipedia.org/wiki/Point-contact_transistor"
"Richard Stallman", "1983", "Launched the GNU project to provide a free alternative to the #{Unix} operating system; developing several pieces of influential software including the GNU Compiler Collection (GCC), GNU Debugger and the GNU Emacs text editor. It would eventually be merged into the Linux kernel of #{Linus Torvalds}.", "Operating systems", "GNU, Emacs, GCC, Linux, Text editors", "2", "https://en.wikipedia.org/wiki/GNU_Project"
"Richard Stallman", "1985", "Formally founded the Free Software Foundation (FSS) to support the free/open source software movement. FSS is a social movement with the goal of obtaining and guaranteeing certain freedoms for software users, namely the freedom to run the software, to study and change the software, and to redistribute copies with or without changes.", "Publications", "Open-source, Free software", "3", "https://en.wikipedia.org/wiki/GNU_Project"
"Gerald Jay Sussman", "1975", "Along with #{Guy L. Steele Jr.}, published over two dozen influential papers on advanced topics in programming languages, especially those related to #{Lisp}. These became known as the 'Lambda Papers'.", "Publications, Programming paradigms", "Lisp, Scheme, Functional programming, Lambda calculus", "2", "https://en.wikipedia.org/wiki/Lambda_Papers"
"Gerald Jay Sussman", "1975", "Along with #{Guy L. Steele Jr.}, invented the Scheme programming language, which would become one of the two main dialects (along with Common Lisp) in the #{Lisp} family. Scheme is notable for being the first Lisp to choose lexical scoping and the first to require implementations to perform tail-call optimization - making it very popular for #{functional programming}.", "Programming languages, Programming paradigms", "Lisp, Scheme, Functional programming", "3", "https://en.wikipedia.org/wiki/Scheme_(programming_language)"
"Gerald Jay Sussman", "1985", "Co-authored the Structure and Interpretation of Computer Programs (#{SICP}), an introductory computer science textbook that is widely considered a classic text. It is still widely used in computer science education.", "Algorithms & data structures, Publications", "SICP, Lisp, Scheme", "3", "https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs"
"Guy L. Steele Jr.", "1975", "Along with #{Gerald Jay Sussman}, published over two dozen influential papers on advanced topics in programming languages, especially those related to #{Lisp}. These became known as the 'Lambda Papers'.", "Publications, Programming paradigms", "Lisp, Scheme, Functional programming, Lambda calculus", "2", "https://en.wikipedia.org/wiki/Lambda_Papers"
"Guy L. Steele Jr.", "1975", "Along with #{Gerald Jay Sussman}, invented the Scheme programming language, which would become one of the two main dialects (along with Common Lisp) in the #{Lisp} family. Scheme is notable for being the first Lisp to choose lexical scoping and the first to require implementations to perform tail-call optimization - making it very popular for #{functional programming}.", "Programming languages, Programming paradigms", "Lisp, Scheme, Functional programming", "3", "https://en.wikipedia.org/wiki/Scheme_(programming_language)"
"Bob Kahn", "1975", "Co-designed the #{TCP/IP} #{network|Internet & networking} protocol suite for the US Department of Defense.", "Internet & networking", "TCP/IP", "5", "https://en.wikipedia.org/wiki/Internet_protocol_suite"
"Bob Kahn", "1992", "Co-founded the Internet Society to provide guidance for standards and education related to the Internet.", "Internet & networking", "", "2", "https://en.wikipedia.org/wiki/Internet_Society"
"James Gosling", "1994", "Designed Java, a statically-typed object-oriented programming language, whilst working for Sun Microsystems. Due to it's corporate backing, portable bytecode interpreter and high performance, Java became extremely popular in the software engineering world.", "Programming languages", "Java, Object-oriented programming, Software engineering", "4", "https://en.wikipedia.org/wiki/Java_(programming_language)"
"Bill Joy", "1976", "Created vi, a modal text editor that eventually became the de-facto #{Unix} standard and nearly undisputed hacker favourite.", "Operating systems", "Vi, Text editors", "3", "https://en.wikipedia.org/wiki/Java_(programming_language)"
"Bill Joy", "1977", "Made several enhancements to the Berkeley Software Distribution (BSD) Unix operating system including a Pascal compiler and several kernel improvements. Joy also handled early distribution.", "Operating systems", "Unix, BSD", "3", "https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"
"Larry Wall", "1987", "Created Perl, a multi-paradigm, interpreted, dynamic programming language. Perl enjoyed much popularity during the 1990's and influenced many of the so-called 'scripting languages' in major use today (JavaScript, Ruby, Python, etc).", "Programming languages", "Perl", "3", "https://en.wikipedia.org/wiki/Perl"
"Guido Van Rossum", "1991", "Created Python, a multi-paradigm, interpreted, dynamic programming language. Python has grown to become one of the most popular programming languages ever created.", "Programming languages", "Python", "4", "https://en.wikipedia.org/wiki/Python_(programming_language)"
"Bjarne Stroustrup", "1983", "Released the first implementation of C++, an imperative, compiled and object-oriented programming language. C++ has become one of the most important and widely-used programming languages of all time. It had a large influence on newer languages such as Java and C#.", "Programming languages", "C++, Object-oriented programming", "4", "https://en.wikipedia.org/wiki/C%2B%2B"
"Brendan Eich", "1995", "Created JavaScript, originally called Mocha, a dynamic, weakly-typed and interpreted programming language. It was originally intended to put Scheme (a #{Lisp}) into the browser but was instead made to resemble popular languages of the time. JavaScript has enjoyed massive popularity in recent years.", "Programming languages", "Javascript", "3", "https://en.wikipedia.org/wiki/JavaScript"
"Steve Russell", "1956", "Implemented the first #{Lisp} interpreter on an IBM 704 minicomputer after reading #{John McCarthy}'s publications. This implementation introduced the 'car' and 'cdr' operations that are still used by most Lisp implementations today.", "Programming languages, Programming paradigms", "Lisp, Functional programming", "4", "https://en.wikipedia.org/wiki/Lisp_(programming_language)"
"Steve Russell", "1957", "Invented the Continuation, an abstract programming language construct that represents the control state of a computer program while working on his second Lisp implementation.", "Algorithms & data structures", "Continuation, Lisp, Functional programming", "2", "https://en.wikipedia.org/wiki/Continuation"
"Steve Russell", "1962", "Created Spacewar!, a very early video game and the first game to enjoy widespread popularity in the computing community. Spacewar! was a space combat simulator that ran on the PDP-1 minicomputer. It was an early offort in using computers for non-academic purposes.", "Computer graphics", "Spacewar!", "3", "https://en.wikipedia.org/wiki/Spacewar_(video_game)"
"Linus Torvalds", "1991", "Released the first version prototypes of the Linux kernel to the comp.os.minix newsgroup on Usenet. Verious Linux distributions grew to become some of the most dominant operating systems of all time. Linux is free and open source software.", "Operating systems", "Linux", "5", "https://en.wikipedia.org/wiki/Linux_kernel"
"Linus Torvalds", "2005", "Developed git, a distributed revision control system. Git has since become the dominant version control system in software development.", "Operating systems", "Git", "2", "https://en.wikipedia.org/wiki/Git_(software)"
"Steve Wozniak", "1976", "Created the hardware, circuit board designs, and operating system for the Apple I computer; a very innovative machine for it's day. The success of the Apple I eventually led to the creation of the Apple company, which has since become one of the largest companies in the world.", "Early computers", "Apple I", "5", "https://en.wikipedia.org/wiki/Apple_I"
"Charles H. Moore", "1970", "Created the first version of Forth, an imperative stack-based programming language. Forth grew to become the most notable stack-based language and is still in use today in some areas of embedded software and onboard spacecraft systems.", "Programming languages, Programming paradigms", "Forth", "2", "https://en.wikipedia.org/wiki/Forth_(programming_language)"
"Robin Milner", "1972", "Developed the Logic for Computable Functions (LCF) automated theorem prover. LCF introduced an early version of the ML programming language to allow users to write theorem-proving tactics.", "Theoretical computer science", "LCF theorem prover, Theorem provers", "2", "https://en.wikipedia.org/wiki/Logic_for_Computable_Functions"
"Robin Milner", "1973", "Created ML, a functional programming language, to develop proof tactics in his LCF theorem prover. ML was one of the first languages to implement the Hindley–Milner type system and has since had a big influence on more modern languages such as Haskell, F# and Rust.", "Programming languages, Programming paradigms", "ML, Functional programming, Hindley–Milner type system", "3", "https://en.wikipedia.org/wiki/ML_(programming_language)"
"Gene Mosher", "1986", "Demonstrated his software, ViewTouch, on a 16-bit Atari computer. ViewTouch was an early color point-of-sale software and the first commercial application of a touchscreen technology.", "Computer graphics", "Touchscreen, Human-computer interaction", "3", "https://en.wikipedia.org/wiki/Touchscreen#History"
"Ed Roberts", "1974", "Lead the development of the Altair 8800, a self-assembly personal microcomputer based on the Intel 8080 microprocessor. The Altair became incredibly popular with hobbyists and is widely regarded as the spark that ignited the home computer revolution.", "Early computers", "Altair 8800, Minicomputer, Human-computer interaction", "4", "https://en.wikipedia.org/wiki/Altair_8800"
"Jean E. Sammet", "1959", "Joined the committee who designed the #{COBOL} programming language. COBOL was one of the first programming languages to include the use of an English-like syntax.", "Programming languages, Women in computing", "COBOL", "4", "https://en.wikipedia.org/wiki/COBOL"
"Jean E. Sammet", "1962", "Developed #{FORMAC}, or FORmula MAnipulation Compiler. An early programming language inspired by #{FORTRAN}.", "Programming languages, Women in computing", "FORMAC, FORTRAN", "2", "https://en.wikipedia.org/wiki/FORMAC_%28programming_language%29"
